// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SUPABASE")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  twitt         Twitt[]
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  follower      Follow[]        @relation("followerRelation")
  following     Follow[]        @relation("followingRelation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment Comments[]
  sender Messsages[] @relation("sentMessages")
  receiver Messsages[] @relation("receivedMessages")

}

model Messsages {
    id String @id @default(cuid())
    senderId String
    receiverId String
    message String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    image String?
    sender User @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User @relation("receivedMessages", fields: [receiverId], references: [id])

    @@index([senderId])
    @@index([receiverId])
    @@index([createdAt])
}

model Comments {
    id Int @id @default(autoincrement())
    comment String 
    isDeleted Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    postId String
    userId String
    post Twitt @relation(fields: [postId],references: [id] ,onDelete: Cascade)
    user User @relation(fields: [userId], references: [id] ,onDelete: Cascade)

    @@index([postId])
    @@index([createdAt])
    
}
model Follow {
  followerId  String
  followingId String
  follower    User   @relation("followerRelation", fields: [followerId], references: [id])
  following   User   @relation("followingRelation", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Twitt {
  id        String   @id @default(uuid())
  twitt     String
  image     String?
  video     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  comment   Comments[]
  userId    String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
